//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FormProject.Database
{
    using FormProject.Controllers;
    using FormProject.Models;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web;

    public partial class Claim
    {

        public int Id { get; set; }

        [Display(Name = "Field_No", ResourceType = typeof(Resource))]
        public string No { get; set; }

        [Display(Name = "Field_Subject", ResourceType = typeof(Resource))]
        public string Subject { get; set; }

        [Display(Name = "Field_Customer", ResourceType = typeof(Resource))]
        public string Customer { get; set; }

        [Display(Name = "Field_Model", ResourceType = typeof(Resource))]
        public string Model_name { get; set; }

        [Display(Name = "Field_Group_Model", ResourceType = typeof(Resource))]
        public string Model_group { get; set; }

        [Display(Name = "Field_Model", ResourceType = typeof(Resource))]
        public string Model_Id { get; set; }

        [Display(Name = "Field_Create_by", ResourceType = typeof(Resource))]
        public string Create_by { get; set; }

        public Nullable<System.DateTime> Create_date { get; set; }
        public string Create_dateStr
        {
            get
            {
                if (Create_date is DateTime date) return date.ToDateString();
                else return DateTime.Now.ToDateString();
            }
        }

        [Display(Name = "Field_Type", ResourceType = typeof(Resource))]
        public string Type { get; set; }

        [Display(Name = "Field_Occur_content", ResourceType = typeof(Resource))]

        public string Occur_content { get; set; }

        [Display(Name = "Field_Occur_date", ResourceType = typeof(Resource))]

        public Nullable<System.DateTime> Occur_date { get; set; }
        public string Occur_month
        {
            get
            {
                if (Occur_date is DateTime date)
                {
                    var month = date.Month;
                    var year = date.Year;
                    return year + "-" + month;
                } else return "";
            }
        }

        [Required(ErrorMessageResourceType = typeof(Resource), ErrorMessageResourceName = "Image_NG_AttachRequired")]
        [Display(Name = "Field_Image_NG", ResourceType = typeof(Resource))]
        public string Image_NG { get; set; }

        [Display(Name = "Field_Occur_place", ResourceType = typeof(Resource))]

        public string Occur_place { get; set; }

        [Display(Name = "Field_Person_detect", ResourceType = typeof(Resource))]

        public string Person_detect { get; set; }

        [Display(Name = "Field_Number_NG", ResourceType = typeof(Resource))]

        public Nullable<int> Number_NG { get; set; }

        [Display(Name = "Field_Number_test", ResourceType = typeof(Resource))]

        public Nullable<int> Number_test { get; set; }

        [Display(Name = "Field_Occur_frequency", ResourceType = typeof(Resource))]

        public string Occur_frequency { get; set; }

        [Display(Name = "Field_Date_make", ResourceType = typeof(Resource))]

        public Nullable<System.DateTime> Date_make { get; set; }
        public string Date_makeStr
        {
            get
            {
                if (Date_make is DateTime date)
                    return date.ToDateString();
                else
                    return DateTime.Now.ToDateString();
            }
        }

        [Display(Name = "Field_Confirm_artifact", ResourceType = typeof(Resource))]

        public string Confirm_artifact { get; set; }

        [Display(Name = "Field_Point_change", ResourceType = typeof(Resource))]

        public string Point_change { get; set; }

        [Display(Name = "Field_Retest", ResourceType = typeof(Resource))]

        public string Retest { get; set; }

        [Display(Name = "Field_Confirm_factor", ResourceType = typeof(Resource))]

        public string Confirm_factor { get; set; }

        [Display(Name = "Field_Analysis_factor", ResourceType = typeof(Resource))]

        public string Analysis_factor { get; set; }

        [Display(Name = "Field_Reason_occur", ResourceType = typeof(Resource))]

        public string Reason_occur { get; set; }

        [Display(Name = "Field_Reason_error", ResourceType = typeof(Resource))]

        public string Reason_error { get; set; }

        [Display(Name = "Field_Step_occur", ResourceType = typeof(Resource))]

        public string Step_occur { get; set; }

        [Display(Name = "Field_Step_error", ResourceType = typeof(Resource))]

        public string Step_error { get; set; }

        [Display(Name = "Field_Strategy_IsPokayoke", ResourceType = typeof(Resource))]

        public Nullable<int> Strategy_IsPokayoke { get; set; }

        [Display(Name = "Field_Strategy_temp", ResourceType = typeof(Resource))]
        public string Strategy_temp { get; set; }

        [Display(Name = "Field_Strategy_longtime", ResourceType = typeof(Resource))]
        public string Strategy_longtime { get; set; }

        [Display(Name = "Field_Strategy_follow", ResourceType = typeof(Resource))]
        public string Strategy_follow { get; set; }

        [Display(Name = "Field_Strategy_verify", ResourceType = typeof(Resource))]
        public string Strategy_verify { get; set; }

        [Display(Name = "Field_Response_occur_place", ResourceType = typeof(Resource))]
        public string Response_occur_place { get; set; }
        public string Confirm_complete { get; set; }
        private Nullable<int> status_approval;
        public Nullable<int> Status_approval
        {
            get
            {

                return status_approval;
            }
            set
            {
                status_approval = value;
                Status_Approval_String = SetStatus_Approval_String();
            }
        }
        public Nullable<int> IsNewest { get; set; }

        [Display(Name = "Field_Status", ResourceType = typeof(Resource))]
        public Nullable<int> Status { get; set; }
        public Nullable<int> ProcessListId { get; set; }
        private string process;
        public string Process
        {
            get { return process; }
            set
            {
                process = value;
            }
        }

        [Display(Name = "Field_Modify_by", ResourceType = typeof(Resource))]
        public string Modify_by { get; set; }

        [Display(Name = "Field_Modify_date", ResourceType = typeof(Resource))]
        public Nullable<System.DateTime> Modify_date { get; set; }
        public virtual ICollection<Notice> Notices { get; set; }
        public virtual ProcessList ProcessList { get; set; }
        public virtual User User { get; set; }
        public virtual User User1 { get; set; }

        [Display(Name = "Field_Comment_reject", ResourceType = typeof(Resource))]
        public string Comment_reject { get; set; }
        public string ActionName { get; set; }

        public Nullable<int> SteptToReject { get; set; }
        // Dùng để filter waiting me. Vì vậy chỉ set giá trị khi đã hoàn thành validate các trường khác
        public string Next_Action_by { get; set; }
        public Nullable<int> CanEdit { get; set; }

        [Display(Name = "Field_Classify4M", ResourceType = typeof(Resource))]
        public string Classify4M { get; set; }

        [Display(Name = "Field_Due_date", ResourceType = typeof(Resource))]
        public Nullable<DateTime> Due_date { get; set; }

        public HttpPostedFileBase Image_NG_Attach { get; set; }

        public string Cause_occur { get; set; }
        public string Delivery_history { get; set; }
        public string Cause_outflow { get; set; }
        public string Temp_measure { get; set; }
        public string Outflow_countermeasure { get; set; }
        public string Type_Form { get; set; }
        public string Containment_Action { get; set; }
        public string FileAttach { get; set; }

        public Claim copy()
        {
            Claim claim = new Claim()
            {
                Id = this.Id,
                No = this.No,
                Subject = this.Subject,
                Customer = this.Customer,
                Model_name = this.Model_name,
                Model_group = this.Model_group,
                Model_Id = this.Model_Id,
                Create_by = this.Create_by,
                Create_date = this.Create_date,
                Type = this.Type,
                Occur_content = this.Occur_content,
                Occur_date = this.Occur_date,
                Image_NG = this.Image_NG,
                Occur_place = this.Occur_place,
                Person_detect = this.Person_detect,
                Number_NG = this.Number_NG,
                Number_test = this.Number_test,
                Occur_frequency = this.Occur_frequency,
                Date_make = this.Date_make,
                Confirm_artifact = this.Confirm_artifact,
                Point_change = this.Point_change,
                Retest = this.Retest,
                Confirm_factor = this.Confirm_factor,
                Analysis_factor = this.Analysis_factor,
                Reason_occur = this.Reason_occur,
                Reason_error = this.Reason_error,
                Step_occur = this.Step_occur,
                Step_error = this.Step_error,
                Strategy_IsPokayoke = this.Strategy_IsPokayoke,
                Strategy_temp = this.Strategy_temp,
                Strategy_longtime = this.Strategy_longtime,
                Strategy_follow = this.Strategy_follow,
                Strategy_verify = this.Strategy_verify,
                Response_occur_place = this.Response_occur_place,
                Confirm_complete = this.Confirm_complete,
                status_approval = this.status_approval,
                Status_Approval_String = this.Status_Approval_String,
                IsNewest = this.IsNewest,
                Status = this.Status,
                ProcessListId = this.ProcessListId,
                process = this.process,
                Process = this.Process,
                Modify_by = this.Modify_by,
                Modify_date = this.Modify_date,
                ProcessList = this.ProcessList,
                User = this.User,
                User1 = this.User1,
                ActionName = this.ActionName,
                Comment_reject = this.Comment_reject,
                Image_NG_Attach = this.Image_NG_Attach,
                Next_Action_by = this.Next_Action_by,
                CanEdit = this.CanEdit,
                Classify4M = this.Classify4M,
                Due_date = this.Due_date,
                SteptToReject = this.SteptToReject,
                Cause_occur = this.Cause_occur,
                Delivery_history = this.Delivery_history,
                Cause_outflow = this.Cause_outflow,
                Temp_measure = this.Temp_measure,
                Outflow_countermeasure = this.Outflow_countermeasure,
                Type_Form = this.Type_Form,
                Containment_Action = this.Containment_Action
            };
            claim.SetProcess();
            claim.SetStep();
            return claim;
        }
        public string Status_Approval_String
        {
            get;
            set;
        }

        public string SetStatus_Approval_String()
        {
            ClaimFormEntities db = new ClaimFormEntities();
            Process process = db.Processes.Where(m => m.Id == Status_approval).FirstOrDefault();
            if (process != null)
            {
                return process.Name;
            }
            return "";
        }

        public void SetProcess()
        {
            processes = GetProcess(Process);

        }
        public void SetStep()
        {
            CurrentProcess = processes.Where(m => m.Id == Status_approval).FirstOrDefault();
            NextStep = GetNextStep(Status_approval.ToString(), processes);
            PreviousStep = GetPreviousStep(Status_approval.ToString(), processes);
            AllPreviousStep = GetAllPreviousStep(Status_approval.ToString(), processes);
        }
        public ProcessModel CurrentProcess
        {
            get;
            set;

        }
        public ProcessModel NextStep
        {
            get; set;
        }
        public ProcessModel PreviousStep { get; set; }

        public List<ProcessModel> AllPreviousStep { get; set; }

        public List<ProcessModel> processes
        {
            get;
            set;
        }
        public List<ProcessModel> GetProcess(string process)
        {

            string[] processList = process.Split(',');
            List<ProcessModel> list = new List<ProcessModel>();
            List<Process> processDB = new ClaimFormEntities().Processes.ToList();
            if (processList != null && processList.Count() > 0)
            {
                for (int i = 0; i < processList.Length; i++)
                {
                    int processId = GetProcessID(processList[i]);
                    List<string> actionBy = GetActionBy(processList[i]);
                    Process p = processDB.Where(m => m.Id == processId).FirstOrDefault();
                    ProcessModel proModel = new ProcessModel()
                    {
                        Id = p.Id,
                        Name = p.Name,
                        DisplayName = p.DisplayName,
                        Action_by = actionBy,
                        CanEdit = p.CanEdit
                    };
                    list.Add(proModel);
                }
            }

            return list;
        }
        public List<ProcessModel> GetAllPreviousStep(string currentStep, List<ProcessModel> process)
        {
            List<ProcessModel> list = new List<ProcessModel>();
            try
            {
                for (int i = 0; i < process.Count; i++)
                {
                    if (process[i].Id < int.Parse(currentStep) && process[i].Id >= Constants.Status_Init)
                    {
                        list.Add(process[i]);
                    }
                }
                return list;
            }
            catch (Exception)
            {
                return list;
            }

        }

        public ProcessModel GetNextStep(string currentStep, List<ProcessModel> process)
        {
            for (int i = 0; i < process.Count; i++)
            {
                if (process[i].Id.ToString() == currentStep)
                {
                    if (i + 1 < process.Count)
                    {
                        return process[i + 1];
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            return null;
        }
        public ProcessModel GetPreviousStep(string currentStep, List<ProcessModel> process)
        {
            for (int i = 0; i < process.Count; i++)
            {
                if (process[i].Id.ToString() == currentStep)
                {
                    if (i - 1 >= 0)
                    {
                        return process[i - 1];
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            return null;
        }
        public string AddCreateByToProcess(string currentProcess, string create_by)
        {
            string[] processList = currentProcess.Split(',');
            string temp = "";
            for (int i = 0; i < processList.Length; i++)
            {
                string step = "";
                if (i < 2)
                {
                    int indexOfbracket = processList[i].IndexOf('(');
                    var processId = processList[i].Substring(0, indexOfbracket);
                    int indexOfClose = processList[i].IndexOf(')');
                    string createBy = processList[i].Substring(indexOfbracket + 1, indexOfClose - indexOfbracket - 1);
                    if (string.IsNullOrEmpty(createBy))
                    {
                        step = processId + "(" + create_by + ")";
                    }
                    else step = processList[i];
                }
                else
                {
                    step = processList[i];
                }
                temp += step;
                if (i < processList.Length - 1)
                {
                    temp += ",";
                }
            }
            return temp;
        }

        public int GetProcessID(string currentProcess)
        {
            int indexOfbracket = currentProcess.IndexOf('(');
            var processId = currentProcess.Substring(0, indexOfbracket);
            return int.Parse(processId);
        }

        public List<string> GetActionBy(string currentProcess)
        {
            try
            {
                int indexOfbracketOpen = currentProcess.IndexOf('(');
                int indexOfbracketClose = currentProcess.IndexOf(')');
                var actionBy = currentProcess.Substring(indexOfbracketOpen + 1, indexOfbracketClose - 2);
                List<string> list = new List<string>();
                var split = actionBy.Split(';');
                foreach (var u in split)
                {
                    if (!string.IsNullOrEmpty(u))
                        list.Add(u);
                }
                return list;
            }
            catch (Exception e)
            {
                Console.Write(e.ToString());
                return null;
            }

        }
        public bool IsWaittingMe(string process, string currentProcess, string userId)
        {
            string[] processList = process.Split(',');
            if (NextStep != null && NextStep.Action_by.Contains(userId))
            {
                if (NextStep.Id > Constants.Status_Create || Comment_reject != null)
                {
                    return true;
                }
                return false;
            }
            return false;
        }

    }
}
